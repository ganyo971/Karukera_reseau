#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>



int main(int argc,char** argv)
{


    if (argc != 3)
    {
        fprintf(stderr,"usage: RE216_CLIENT hostname port\n");
        return 1;
    }

//get address info from the server
//get_addr_info()

struct addrinfo {
  int              ai_flags;
  int              ai_family;
  int              ai_socktype;
  int              ai_protocol;
  socklen_t        ai_addrlen;
  struct sockaddr *ai_addr;
  char            *ai_canonname;
  struct addrinfo *ai_next;
           };

const char *address, const char *port,
                       const struct addrinfo *hints,
                       struct addrinfo **res)


void get_addr_info(const char* address, const char* port, struct addrinfo** res) 

    int status;
    struct addrinfo hints, p;

memset(&hints,0,sizeof(hints));

hints.ai_family=AF_INET;
hints.ai_socktype=SOCK_STREAM;




    hints.ai_family =
    hints.ai_socktype = 

    status = getaddrinfo(address,port,hints,res);


}



//get the socket

   
//s = do_socket()

void get_addr_info(const char* address, const char* port, struct addrinfo** res) 

    int status;
    struct addrinfo hints, p;

memset(&hints,0,sizeof(hints));

hints.ai_family=AF_INET;
hints.ai_socktype=SOCK_STREAM;




    hints.ai_family =
    hints.ai_socktype = 

    status = getaddrinfo(address,port,hints,res);


}


//connect to remote socket
//do_connect()


//get user input
//readline()

//send message to the server
//handle_client_message()


    return 0;


}
